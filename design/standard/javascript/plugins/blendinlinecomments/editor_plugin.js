// Generated by CoffeeScript 1.6.2
(function() {
  tinymce.PluginManager.requireLangPack('blendinlinecomments');

  tinymce.create('tinymce.plugins.BlendInlineCommentsPlugin', {
    init: function(ed, url) {
      var plugin;

      plugin = this;
      ed.blendInlineComment = {
        makeBubble: this.makeBubble,
        hasProperties: this.hasProperties,
        getUuid: this.getUuid,
        deleteComment: this.deleteComment
      };
      ed.addCommand('addinlinecomment', this.addComment);
      ed.addButton('inlinecomment', {
        id: 'inlinecomment',
        title: 'Add Comment',
        cmd: 'addinlinecomment'
      });
      ed.onPostRender.add(function(ed, evt) {
        return setTimeout(function() {
          plugin.injectComments(ed, evt);
          return ed.execCommand('initializeinlinecomments');
        }, 200);
      });
      $('#' + ed.settings.id).closest('form').submit(function() {
        return tinyMCE.triggerSave();
      });
      ed.onNodeChange.add(this.updateComments);
      ed.onSaveContent.add(this.handleSave);
      return ed.addCommand('initializeinlinecomments', function(editor) {
        ed = editor || ed;
        $.fn.onOrDelegate = function(event, selector, fn) {
          if (typeof $.fn.on !== 'undefined') {
            return this.on(event, selector, fn);
          } else {
            return this.delegate(selector, event, fn);
          }
        };
        $(ed.contentDocument.body).onOrDelegate('click', '.delete-button', function(ev) {
          var body, bubble, span, target;

          console.log('delete button');
          body = $(this).closest('body');
          bubble = $(this).closest('.comment-bubble');
          target = bubble.attr('data-target');
          span = $("#" + target, body);
          span.replaceWith(span.html());
          bubble.remove();
          return false;
        });
        $(ed.contentDocument.body).onOrDelegate('mouseover', '.inlinecomment', function(ev) {
          var bubble;

          $('.inlinecomment,.comment-bubble', ed.contentDocument.body).removeClass('selected');
          $(this).addClass('selected');
          bubble = $(this).attr('id').replace('comment_tag', 'comment_bubble');
          return $('#' + bubble, ed.contentDocument.body).addClass('selected');
        });
        $(ed.contentDocument.body).onOrDelegate('mouseout', '.inlinecomment', function(ev) {
          return $('.inlinecomment,.comment-bubble', ed.contentDocument.body).removeClass('selected');
        });
        $(ed.contentDocument.body).onOrDelegate('mouseover', '.comment-bubble', function(ev) {
          var target;

          $(this).addClass('selected');
          target = $(this).attr('data-target');
          $('.inlinecomment', ed.contentDocument.body).removeClass('selected');
          return $('#' + target, ed.contentDocument.body).addClass('selected');
        });
        $(ed.contentDocument.body).onOrDelegate('mouseout', '.comment-bubble', function(ev) {
          var target;

          $(this).removeClass('selected');
          target = $(this).attr('data-target');
          return $('#' + target, ed.contentDocument.body).removeClass('selected');
        });
        $(ed.contentDocument.body).keydown(function(ev) {
          var range;

          if (ev.keyCode === 8) {
            range = ed.selection.getRng();
            if ($(range.startContainer).closest('.comment-insert').length === 0) {
              return true;
            }
            if (range.startOffset > 0) {
              return true;
            } else {
              return false;
            }
          }
          return true;
        });
        $(ed.contentDocument.body).onOrDelegate('click', '.reply-button', function(ev) {
          var bubble, comment, commentDiv, id, idTag, key, reply, replyDiv, target, time;

          time = new Date();
          key = ed.blendInlineComment.getUuid();
          bubble = $(this).closest('.comment-bubble');
          reply = $(this).closest('.comment-reply');
          target = bubble.attr('data-target');
          id = ed.blendInlineComment.getUuid();
          idTag = "comment_replyx_";
          idTag += id;
          commentDiv = $('<div class="inline-comment editing"><p class="comment-insert"><span class="start"><br /></span></p></div>');
          commentDiv.attr('id', "reply_" + bubble.attr('data-id'));
          replyDiv = $('<div class="reply-text" contenteditable="true"><button class="reply-cancel-button">Cancel</button></div>');
          replyDiv.attr('data-new', 1);
          replyDiv.attr('id', idTag);
          replyDiv.attr('data-reply', bubble.attr('data-id'));
          replyDiv.addClass('new-comment');
          replyDiv.prepend(commentDiv);
          comment = $('<div><strong class="reply-header">Reply:</strong></div>');
          comment.append(replyDiv);
          $(this).replaceWith(comment);
          ed.selection.select($('.start', commentDiv).get(0));
          return ed.selection.collapse(true);
        });
        return $(ed.contentDocument.body).onOrDelegate('click', '.reply-cancel-button', function(ev) {
          var reply;

          reply = $(this).closest('.comment-reply');
          return reply.html("<button class=\"reply-button\">Reply</button>");
        });
      });
    },
    updateComments: function(ed, cm, n, co, ob) {
      var blockEdit, blockEditElem, dontComment, tops;

      setTimeout(function() {
        return cm.setDisabled('inlinecomment', co != null ? co : {
          0: 1
        });
      }, 100);
      tops = {};
      $('.comment-bubble', ed.contentDocument).each(function() {
        var comment, coords, right, target, top;

        target = $(this).attr('data-target');
        comment = $("#" + target, ed.contentDocument);
        coords = comment.offset();
        top = coords.top;
        right = 8;
        while (typeof tops[top] !== 'undefined') {
          top = top + 10;
          right = right + 10;
        }
        tops[top] = true;
        $(this).removeClass('selected');
        return $(this).css({
          'position': 'absolute',
          'top': top + 'px',
          'right': right + 'px'
        });
      });
      $('.inlinecomment', ed.contentDocument).removeClass('selected');
      blockEdit = false;
      blockEditElem = false;
      dontComment = false;
      return $.each(ob.parents, function() {
        var targetId;

        if (this.className.indexOf('blNonEditable') > -1) {
          blockEdit = true;
          blockEditElem = this;
          dontComment = true;
        }
        if (this.className.indexOf('comment-bubble') > -1) {
          dontComment = true;
        }
        if (this.className.indexOf('inlinecomment') > -1) {
          $(this).addClass('selected');
          targetId = $(this).attr('id').replace('tag', 'bubble');
          $("#" + targetId, ed.contentDocument).addClass('selected');
          return true;
        }
      });
      /*
      
      if (dontComment)
          setTimeout( ->
              cm.setDisabled('inlinecomment', 1)
      
          , 150)
      if (blockEdit)
          ed.selection.select(blockEditElem)
      */

    },
    addComment: function() {
      var bubble, ed, key, sel, time;

      ed = this;
      time = new Date();
      key = this.blendInlineComment.getUuid();
      sel = this.selection;
      bubble = this.blendInlineComment.makeBubble('Author', time, '<p class="comment-insert"><span class="start"><br /></span></p>', true, key, [], ed);
      sel.setContent(("<span id=\"comment_tag_" + key + "\" type=\"custom\" class=\"ezoeItemCustomTag inlinecomment\" data-id=\"" + key + "\" customattributes=\"comment_id|" + key + "\">") + sel.getContent() + '</span>');
      this.dom.add(this.contentDocument.body, bubble.get(0));
      this.selection.select($('.start', bubble).get(0));
      return this.selection.collapse(true);
    },
    deleteComment: function(bubble) {
      console.log('delete');
      return true;
    },
    getUuid: function() {
      var hexDigits, i, s, _i;

      s = [];
      hexDigits = "0123456789abcdef";
      for (i = _i = 0; _i <= 36; i = ++_i) {
        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
      }
      s[14] = "4";
      s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);
      s[8] = s[13] = s[18] = s[23] = "-";
      return s.join("");
    },
    makeBubble: function(author, time, comment, isNew, id, replies, ed) {
      var bubble, canEditComment, formatDate, idTag;

      formatDate = function(date) {
        var formatted, minutes;

        minutes = date.getMinutes().toString();
        if (minutes.length < 2) {
          minutes = "0" + minutes;
        }
        formatted = "" + (date.getMonth() + 1) + "/" + (date.getDate()) + "/" + (date.getFullYear()) + " at ";
        if (date.getHours() > 12) {
          formatted += "" + (date.getHours() - 12) + ":" + minutes + " pm";
        } else {
          formatted += "" + (date.getHours()) + ":" + minutes + " am";
        }
        return formatted;
      };
      idTag = "comment_bubble_";
      idTag += id;
      bubble = $("<div class=\"comment-bubble no-diff\"></div>");
      bubble.attr('id', idTag);
      bubble.attr('data-id', id);
      canEditComment = '';
      if (isNew) {
        bubble.attr('data-new', 1);
        bubble.addClass('new-comment');
        canEditComment = 'editing';
      } else {
        bubble.attr('contenteditable', 'false');
      }
      bubble.attr('data-target', idTag.replace('comment_bubble', 'comment_tag'));
      bubble.append("<button class=\"delete-button \">Delete</button>");
      if (!isNew) {
        bubble.append("<span class=\"author \">" + author + "</span> ");
        bubble.append("<span class=\"time \">" + (formatDate(time)) + "</span><br />");
      }
      bubble.append("<div class=\"inline-comment " + canEditComment + "\">" + comment + "</div>");
      if (!isNew) {
        $.each(replies, function() {
          var reply;

          time = new Date(this.added * 1000);
          reply = $('<div class=\"comment-reply\"></div>');
          reply.append("<span class=\"author \">" + this.author + "</span> ");
          reply.append("<span class=\"time \">" + (formatDate(time)) + "</span><br />");
          reply.append("<div class=\"inline-comment " + canEditComment + "\">" + this.comment + "</div>");
          return bubble.append(reply);
        });
        bubble.append("<div class=\"comment-reply\"><button class=\"reply-button\">Reply</button></div>");
      }
      return bubble;
    },
    injectComments: function(ed, evt) {
      var attributeId, editorId, language, plug, version;

      plug = this;
      language = eZOeAttributeSettings.language.substr(1);
      version = eZOeAttributeSettings.ez_contentobject_version;
      editorId = ed.id;
      if (ed['parentEditorId']) {
        editorId = ed.parentEditorId;
      }
      attributeId = editorId.split('_').pop();
      console.log('INJECTCOMMENTS:' + ("/inlinecomments/read/" + attributeId + "/" + version + "/" + language));
      return $.get("/inlinecomments/read/" + attributeId + "/" + version + "/" + language, {}).done(function(data) {
        var tops;

        tops = {};
        $('.inlinecomment', ed.contentDocument).each(function() {
          var bubble, coords, custom, replies, right, tagId, time, top;

          custom = $(this).attr('customattributes');
          tagId = custom.split('|').pop();
          if (!data[tagId]) {
            return;
          }
          $(this).attr('id', "comment_tag_" + tagId);
          time = new Date(data[tagId].added * 1000);
          replies = [];
          $.each(data, function() {
            if (this.replyTo === tagId) {
              return replies.push(this);
            }
          });
          bubble = ed.blendInlineComment.makeBubble(data[tagId].author, time, data[tagId].comment, false, tagId, replies, ed);
          coords = $(this).offset();
          top = coords.top;
          right = 8;
          while (typeof tops[top] !== 'undefined') {
            top = top + 10;
            right = right + 10;
          }
          tops[top] = true;
          bubble.css({
            position: 'absolute',
            top: top + 'px',
            right: right + 'px'
          });
          ed.dom.add(ed.contentDocument.body, bubble.get(0));
          return true;
        });
        ed.undoManager.clear();
        return ed.nodeChanged();
      });
    },
    handleSave: function(ed, object) {
      var attributeId, commentData, content, editorId, formToken, language, version;

      content = jQuery('<div>' + object.content + '</div>', null);
      commentData = {};
      $('.new-comment', content).each(function() {
        var comment, id, reply;

        id = $(this).attr('id').substr(15);
        reply = null;
        if (typeof $('.inline-comment', this).attr('id') !== 'undefined') {
          reply = $('.inline-comment', this).attr('id').substr(6);
        }
        comment = $('.inline-comment', this).html().trim();
        return commentData[id] = {
          comment: comment,
          replyTo: reply
        };
      });
      if (!$.isEmptyObject(commentData)) {
        language = eZOeAttributeSettings.language.substr(1);
        version = eZOeAttributeSettings.ez_contentobject_version;
        editorId = ed.id;
        if (ed['parentEditorId']) {
          editorId = ed.parentEditorId;
        }
        attributeId = editorId.split('_').pop();
        formToken = $("#ezxform_token_js").attr('content');
        $.post("/inlinecomments/write/" + attributeId + "/" + version + "/" + language, {
          comments: commentData,
          ezxform_token: formToken
        }).done(function(response) {
          return console.log(response);
        });
      }
      $('.comment-bubble', content).remove();
      object.content = content.html();
      return true;
    },
    handleComments: function(ed, object) {
      var attributeId, commentData, dom, editorId, formToken, language, newComments, version;

      language = eZOeAttributeSettings.language.substr(1);
      version = eZOeAttributeSettings.ez_contentobject_version;
      editorId = ed.id;
      if (ed['parentEditorId']) {
        editorId = ed.parentEditorId;
      }
      attributeId = editorId.split('_').pop();
      dom = ed.dom;
      newComments = {};
      commentData = {};
      tinymce.each(dom.select('div', object.node).reverse(), function(n) {
        var id, targetId;

        if (n && (dom.hasClass(n, 'comment-bubble'))) {
          targetId = dom.getAttrib(n, 'data-target');
          id = dom.getAttrib(n, 'data-id');
          if (dom.getAttrib(n, 'data-new') === '1') {
            console.log('New Comment ID' + dom.getAttrib(n, 'data-target'));
            console.log($('.inline-comment', n).html());
            if ($('.inline-comment', n).text().trim().length > 0) {
              newComments[id] = {
                bubble: n,
                id: id,
                tag: dom.select("span#" + targetId).pop()
              };
              commentData[id] = $('.inline-comment', n).html();
            }
          }
          dom.remove(n, 0);
          return true;
        }
      });
      if (ed.blendInlineComment.hasProperties(newComments)) {
        formToken = $("#ezxform_token_js").attr('content');
        return $.post("/inlinecomments/write/" + attributeId + "/" + version + "/" + language, {
          comments: commentData,
          ezxform_token: formToken
        }).done(function(response) {
          tinymce.each(newComments, function(obj, id) {
            var tag;

            return tag = dom.select("span#" + id);
          });
          return console.log(response);
        });
      }
    },
    hasProperties: function(object) {
      var hasProps;

      hasProps = false;
      $.each(object, function() {
        return hasProps = true;
      });
      return hasProps;
    },
    getInfo: function() {
      return {
        longname: 'Google Drive Import plugin',
        author: 'Blend Interactive',
        authorurl: 'http://blendinteractive.com',
        infourl: 'http://blendinteractive.com',
        version: "1.0"
      };
    }
  });

  tinymce.PluginManager.add('blendinlinecomments', tinymce.plugins.BlendInlineCommentsPlugin);

}).call(this);
